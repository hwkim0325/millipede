Outline

{Give an example tree}

The idea of the waterfall algorithm is to merge together local minima on a spanning tree.
A local minimum on a tree is a set of connected edges S of equal weight w such that for each edge e
crossing the boundary between s and s', weight of e > w.

Between any two such regional minima there is a single path that joins them.
Along this path there will be an edge of maximal weight (assuming different edge weights).
The waterfall algorithm aims to identify these maximal edges and merge together any nodes
separated by other edges.

This is traditionally a very imperative algorithm:

*) Each regional minimum is identified via a pass over the tree
*) Next, the smallest edge leading away from a regional minimum is found:
   - If it connects two regional minima, it is kept unchanged.
   - Otherwise the edge is elided and the two nodes that it connects
     are merged.
*) Continue until all edges have been dealt with.

It is evident that this algorithm does not act in a localised manner,
the regional minima may be spread all over the tree.
So it is perhaps somewhat surprising that this algorithm can be performed
in a single functional pass of the tree.

-------------

The algorithm works on the observation that in an MST, and edge is maximal
on a path between two regional minima iff it is not the minimum edge
from some node.

{proof}

-------------

We  define the data type over which the waterfall algorithm runs as:

> data Tree a = Node a [Edge a]
>
> data  Edge a = Edge Int (Tree a)

So a tree is rooted at a single node which has a list of all its neighbouring edges.
Each edge is a pair made up of the weight of the edge and the child.

The waterfall algorithm then works recursively over a tree, merging the desired nodes.
Therefore we also define a class mergeable:

> class Mergeable a where
>   union :: a -> a -> a
>   unions :: [a] -> a
>   unions = foldl union empty
>   empty :: a
>   empty = unions []

With the idea that the waterfall algorithm can work over a tree of any mergeable data type
e.g. a list of characters:

> instance Mergeable [Char] where
>   union a b  = a ++ b
>   unions = foldr union ""
>   empty = ""

The type signature of waterfall is then

> waterfall :: Mergeable a =>   Tree a -> Tree a



At the root of a tree we need to consider the following cases:

1) A child with which we want to merge (i.e. the smallest child) that does not want to merge with us.
2) A child with which we want to merge (i.e. the smallest child) that does want to merge with us.
3) A child with which we do not want to merge does not want to merge with us.
4) A child with which we do not want to merge does want to merge with us.

It is only in the third case that the edge between parent and child is kept since it is not the minimal edge from either node.
If the child below does not want to merge upwards, then we can simply recurse on that child as if it where the root of a tree.
It needn't know about the rest of the tree above it.

Otherwise, the minimal edge from the child is the edge towards it's parent.
In this case, we want to recurse on the child but without looking for it's smallest edge since it has already been identified.

For this case, we define a function similar to waterfall that does not attempt to identify the smallest child and merge with it.
This function has almost the same definition as that of waterfall.

{Explain more algorithm}

{Include the invariant the edges are sorted by weight, so the minimum is at the head}
Originally, we had something like this:
waterfall :: Mergeable a =>   Tree a -> Tree a
waterfall  (Node r []) = Node r []
waterfall  (Node r es)
  | hasChildren child && minVal child <  w = ...
  | otherwise  = ...
  where
    ((Edge w child):cs) = extractMin es

but by maintaining the list of children in sorted order, we can just remove the head of the list each time.
---------------











